// Generated by gencpp from file cse571_project/GetRewardResponse.msg
// DO NOT EDIT!


#ifndef CSE571_PROJECT_MESSAGE_GETREWARDRESPONSE_H
#define CSE571_PROJECT_MESSAGE_GETREWARDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cse571_project
{
template <class ContainerAllocator>
struct GetRewardResponse_
{
  typedef GetRewardResponse_<ContainerAllocator> Type;

  GetRewardResponse_()
    : reward(0.0)  {
    }
  GetRewardResponse_(const ContainerAllocator& _alloc)
    : reward(0.0)  {
  (void)_alloc;
    }



   typedef double _reward_type;
  _reward_type reward;





  typedef boost::shared_ptr< ::cse571_project::GetRewardResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cse571_project::GetRewardResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRewardResponse_

typedef ::cse571_project::GetRewardResponse_<std::allocator<void> > GetRewardResponse;

typedef boost::shared_ptr< ::cse571_project::GetRewardResponse > GetRewardResponsePtr;
typedef boost::shared_ptr< ::cse571_project::GetRewardResponse const> GetRewardResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cse571_project::GetRewardResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cse571_project::GetRewardResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cse571_project

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cse571_project::GetRewardResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cse571_project::GetRewardResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cse571_project::GetRewardResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "771556160cdcd4a7d44d50647196f540";
  }

  static const char* value(const ::cse571_project::GetRewardResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x771556160cdcd4a7ULL;
  static const uint64_t static_value2 = 0xd44d50647196f540ULL;
};

template<class ContainerAllocator>
struct DataType< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cse571_project/GetRewardResponse";
  }

  static const char* value(const ::cse571_project::GetRewardResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 reward\n\
";
  }

  static const char* value(const ::cse571_project::GetRewardResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reward);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRewardResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cse571_project::GetRewardResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cse571_project::GetRewardResponse_<ContainerAllocator>& v)
  {
    s << indent << "reward: ";
    Printer<double>::stream(s, indent + "  ", v.reward);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CSE571_PROJECT_MESSAGE_GETREWARDRESPONSE_H
